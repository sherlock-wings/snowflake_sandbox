-- Create the table (if not already created)
CREATE OR REPLACE TABLE tick_data_synthetic
(
    DATE DATE,
    TIME TIMESTAMP_NTZ,
    SYM STRING,
    PIMCOINTERNALKEY STRING,
    MDSID STRING,
    FEEDSEQNUM INTEGER,
    FEEDAPP STRING,
    VENDORUPDATETIME TIMESTAMP_NTZ,
    MDSRECEIVETIME TIMESTAMP_NTZ,
    MDSPUBLISHTIME TIMESTAMP_NTZ,
    TYPE STRING,
    GMTOFFSET FLOAT,
    EXCHTIME TIMESTAMP_NTZ,
    SEQNUM STRING,
    PRICE FLOAT,
    VOLUME INTEGER,
    ACCVOLUME INTEGER,
    MARKETVWAP FLOAT,
    OPEN FLOAT,
    HIGH FLOAT,
    LOW FLOAT,
    BLOCKTRD VARCHAR,
    TICKDIR VARCHAR,
    TURNOVER VARCHAR,
    BIDPRICE FLOAT,
    BIDSIZE INTEGER,
    ASKPRICE FLOAT,
    ASKSIZE INTEGER,
    BUYERID VARCHAR,
    NOBUYERS VARCHAR,
    SELLERID VARCHAR,
    NOSELLERS VARCHAR,
    MIDPRICE VARCHAR,
    BIDTIC VARCHAR,
    ASKTONE VARCHAR,
    BIDTONE VARCHAR,
    TRADETONE VARCHAR,
    MKTSTIND VARCHAR,
    IRGCOND VARCHAR,
    LSTSALCOND INTEGER,
    CRSSALCOND VARCHAR,
    TRTRDFLAG VARCHAR,
    ELIGBLTRD VARCHAR,
    PRCQLCD VARCHAR,
    LOWTP1 VARCHAR,
    HIGHTP1 VARCHAR,
    ACTTP1 VARCHAR,
    ACTFLAG1 VARCHAR,
    OFFBKTYPE VARCHAR,
    GV3TEXT VARCHAR,
    GV4TEXT VARCHAR,
    ALIAS VARCHAR,
    MFDTRANTP VARCHAR,
    MMTCLASS VARCHAR,
    SPRDCDN VARCHAR,
    STRGYCDN VARCHAR,
    OFFBKCDN VARCHAR,
    PRCQL2 VARCHAR
);

-- Insert 1 billion rows of synthetic data using Snowflake's table generator
INSERT INTO tick_data_synthetic
SELECT
    current_date() AS DATE,
    -- times as varchar with format <datestring>D<timestring>
    split_part(to_char(current_timestamp()), ' ', 1) || 'D' || 
    split_part(to_char(current_timestamp()), ' ', 2) AS TIME,
    
    substr(md5(random()), 1, 4) AS SYM,
    substr(md5(random()), 1, 10) AS PIMCOINTERNALKEY,
    substr(md5(random()), 1, 10) AS MDSID,
    floor(random() * 10000)::integer AS FEEDSEQNUM,
    substr(md5(random()), 1, 6) AS FEEDAPP,
    -- times as varchar with format <datestring>D<timestring>
    split_part(to_char(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 1)) || 'D' ||
    split_part(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 2)
    AS VENDORUPDATETIME,
    -- times as varchar with format <datestring>D<timestring>
    split_part(to_char(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 1)) || 'D' ||
    split_part(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 2)
    AS MDSRECEIVETIME,
    -- times as varchar with format <datestring>D<timestring>
    split_part(to_char(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 1)) || 'D' ||
    split_part(dateadd(second, UNIFORM(0, 1000, RANDOM()), to_timestamp('2020-01-01 00:00:00')),
               ' ', 2)
    AS MDSPUBLISHTIME,
    
    'TICK' AS TYPE,
    (floor(random() * 200) - 100)::float AS GMTOFFSET,
    -- times as varchar with format <datestring>D<timestring>
    split_part(to_char(current_timestamp()), ' ', 1) || 'D' || 
    split_part(to_char(current_timestamp()), ' ', 2) AS EXCHTIME,
    
    substr(md5(random()), 1, 10) AS SEQNUM,
    random() * 100 AS PRICE,
    floor(random() * 10000)::integer AS VOLUME,
    floor(random() * 10000)::integer AS ACCVOLUME,
    random() * 100 AS MARKETVWAP,
    random() * 100 AS OPEN,
    random() * 100 AS HIGH,
    random() * 100 AS LOW,
    substr(md5(random()), 1, 8) AS BLOCKTRD,
    CASE WHEN random() > 0.5 THEN 'U' ELSE 'D' END AS TICKDIR,
    substr(md5(random()), 1, 8) AS TURNOVER,
    random() * 100 AS BIDPRICE,
    floor(random() * 1000)::integer AS BIDSIZE,
    random() * 100 AS ASKPRICE,
    floor(random() * 1000)::integer AS ASKSIZE,
    substr(md5(random()), 1, 6) AS BUYERID,
    substr(md5(random()), 1, 6) AS NOBUYERS,
    substr(md5(random()), 1, 6) AS SELLERID,
    substr(md5(random()), 1, 6) AS NOSELLERS,
    substr(md5(random()), 1, 8) AS MIDPRICE,
    substr(md5(random()), 1, 8) AS BIDTIC,
    substr(md5(random()), 1, 8) AS ASKTONE,
    substr(md5(random()), 1, 8) AS BIDTONE,
    substr(md5(random()), 1, 8) AS TRADETONE,
    substr(md5(random()), 1, 8) AS MKTSTIND,
    substr(md5(random()), 1, 8) AS IRGCOND,
    floor(random() * 1000)::integer AS LSTSALCOND,
    substr(md5(random()), 1, 8) AS CRSSALCOND,
    substr(md5(random()), 1, 8) AS TRTRDFLAG,
    substr(md5(random()), 1, 8) AS ELIGBLTRD,
    substr(md5(random()), 1, 8) AS PRCQLCD,
    substr(md5(random()), 1, 8) AS LOWTP1,
    substr(md5(random()), 1, 8) AS HIGHTP1,
    substr(md5(random()), 1, 8) AS ACTTP1,
    substr(md5(random()), 1, 8) AS ACTFLAG1,
    substr(md5(random()), 1, 8) AS OFFBKTYPE,
    substr(md5(random()), 1, 8) AS GV3TEXT,
    substr(md5(random()), 1, 8) AS GV4TEXT,
    substr(md5(random()), 1, 8) AS ALIAS,
    substr(md5(random()), 1, 8) AS MFDTRANTP,
    substr(md5(random()), 1, 8) AS MMTCLASS,
    substr(md5(random()), 1, 8) AS SPRDCDN,
    substr(md5(random()), 1, 8) AS STRGYCDN,
    substr(md5(random()), 1, 8) AS OFFBKCDN,
    substr(md5(random()), 1, 8) AS PRCQL2
FROM table(generator(rowcount => 5000000000));