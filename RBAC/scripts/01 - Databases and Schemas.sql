--
-- DEV Environment
--

USE ROLE "DEV_SYSADMIN";
CREATE DATABASE IF NOT EXISTS "DEV_EDW_DB";
CREATE SCHEMA IF NOT EXISTS "DEV_EDW_DB"."MODEL" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "DEV_EDW_DB"."RAW" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "DEV_EDW_DB"."STAGE" WITH MANAGED ACCESS;

--
-- PROD Environment
--

USE ROLE "PROD_SYSADMIN";
CREATE DATABASE IF NOT EXISTS "PROD_EDW_DB";
CREATE SCHEMA IF NOT EXISTS "PROD_EDW_DB"."MODEL" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "PROD_EDW_DB"."RAW" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "PROD_EDW_DB"."STAGE" WITH MANAGED ACCESS;

--
-- QA Environment
--

USE ROLE "QA_SYSADMIN";
CREATE DATABASE IF NOT EXISTS "QA_EDW_DB";
CREATE SCHEMA IF NOT EXISTS "QA_EDW_DB"."MODEL" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "QA_EDW_DB"."RAW" WITH MANAGED ACCESS;
CREATE SCHEMA IF NOT EXISTS "QA_EDW_DB"."STAGE" WITH MANAGED ACCESS;

--
-- SANDBOX Environment
--

/*

We want to build the sandbox in such a way that it is "schema-agnostic".
All schemas that are in the Sandbox are meant to only be clones of whatever is in the higher environment
the Sandbox data is cloned from. Those schemas get generated by the Clone-to-Sandbox Sproc, and all
relevant RBAC is applied by the sproc on-the-fly. 

The only built-in RBAC for Sandbox will be at the DB level. 

*/
USE ROLE "SANDBOX_SYSADMIN";
CREATE DATABASE IF NOT EXISTS "SANDBOX_EDW_DB";

/*

Need a DB that holds quality-of-life stuff, like the Clone-To-Sandbox Sproc, or a log table that 
records every SQL statement executed by user-created Stored Procedures 

SYSADMIN will own this for now-- not sure how involved the RBAC needs to be yet
*/

use role sysadmin;
create database if not exists sherlock_wings;
create schema if not exists sherlock_wings.util;
